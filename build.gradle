plugins {
    id 'java'
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'signing'
    id 'maven'
    id 'maven-publish'
    id 'jacoco'
    id "com.diffplug.gradle.spotless"
}

ext {
    // バージョン定義
    versionMajor = 0
    versionMinor = 1
    versionPatch = 0

    // アーティファクト関連
    group 'com.epion-t3'
    version "${versionMajor}.${versionMinor}.${versionPatch}"

    // カスタムパッケージ名
    customPackageName = 'rdb'

    // Document
    siteUrl = 'https://docs.epion-t3.com'

    // Sonatype Repo Urls
    releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
    snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"

    // developper
    developperId = 'takashno'
    developperName = 'Nozomu Takashima'
    developperEmail = 'epion.tropic.test.tool@gmail.com'
}

repositories {
    mavenCentral()
}

configurations {
    devtoolsGenerator
}

dependencies {

    // Core Library
    api 'com.epion-t3:epion-t3-core:0.1.0'

    // Add Library
    implementation 'org.dbunit:dbunit:2.6.0'
    implementation 'org.apache.commons:commons-dbcp2:2.6.0'
    implementation 'mysql:mysql-connector-java:5.1.46'

    // For Develop
    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    testCompile 'junit:junit:4.12'

    // devtools
    devtoolsGenerator 'com.epion_t3:epion-t3-devtools-generator:0.0.2'

}

// JavaDoc
tasks.withType(Javadoc) {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
    options.addBooleanOption('Xdoclint:none', true)
}

// Java
tasks.withType(JavaCompile) {
    sourceCompatibility = 11
    targetCompatibility = 11
    it.options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

spotless {
    java {
        enforceCheck = true
        licenseHeaderFile rootProject.file('./formatter/LICENSE')
        eclipse().configFile rootProject.file('./formatter/formatter.xml')
        lineEndings 'UNIX'
    }
}

// CodeCov
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination project.file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            version = project.hasProperty('snapshot') ? project.version + '-SNAPSHOT' : project.version
            from components.java
            pom {
                name = project.name
                description = "epion-t3 core library"
                url = "https://github.com/epion-tropic-test-tool/${project.name}"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = project.developperId
                        name = project.developperName
                        email = project.developperEmail
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/epion-tropic-test-tool/${project.name}.git"
                    developerConnection = "git@github.com:epion-tropic-test-tool/${project.name}.git"
                    url = "https://github.com/epion-tropic-test-tool/${project.name}"
                }
            }
        }
    }
    repositories {
        maven {
            name="OSSRH"
            url = project.hasProperty('snapshot') ? project.snapshotsRepoUrl : project.releasesRepoUrl
            def sonatypeUser = project.hasProperty('sonatypeUser') ? project.property('sonatypeUser') : System.getenv('MAVEN_USERNAME')
            def sonatypePassword = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('MAVEN_PASSWORD')
            credentials {
                username = sonatypeUser
                password = sonatypePassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task devtoolsGenerate(type: JavaExec) {
    main = "com.epion_t3.devtools.app.Application"
    classpath = configurations.devtoolsGenerator
    args = [
            '-t',
            "${projectDir}/src/main/resources/et3_${customPackageName}_spec_config.yaml",
            '-d',
            "${projectDir}",
            "-m",
            "${projectDir}/src/main/resources",
            "-j",
            "${projectDir}/src/main/java/"
    ]
}